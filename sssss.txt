//snake games code ,algorithm, definition
//nokia1180's younger version:v
//Author:SM.Munawar Mahtab, CUET-ME'16
//farther contact-email:mahtabmunawar81@gmail.com

//===================================================================//

/*basic you need to know....    
 1.you have to draw a playground
 2.you have to create a snake with head and tail where eaten out foods will be stored
 3.then initial screen will appear
 4.then you have to create randomly generated food within your playground
 5.then you have to develop a function that'll move your snake up,down,top,bottom.definitely it'll be hardest part of your code.
 6.after one move is being done then do the step 4 again.
 7.if your snake violates any of the rules then it will be treated as gameover .
*/



#include <iostream>
#include <windows.h>
#include <conio.h>
#include <string>

using namespace std;

bool gameover;
bool shutDown;
int width = 40;
int height = 20;
int x, y, fruitX, fruitY, score;
int tailX[400], tailY[400], num_of_tail;
enum eDirection {STOP, LEFT, RIGHT, UP, DOWN};
eDirection direc;

void startingscreen()
{
	system("cls");
	cout << "\nWELCOME TO YOUNGER VERSION of NOKIA1180 SNAKE GAMES!"
	     << "\n\nHello dude..... press 'S' to START!"
	     << "\n\nPress 'Q' to QUIT"
	     << "\n\nPress 'I' for INSTRUCTIONS."
	     << "\n\nYour Previous Score: " << score << endl;
}


void Instructions()  //for farther Instructions
{
	system("cls"); //at first we clear our previous game playground then the instructions will be displayed with an input section
	cout << "\nPress key 'W' to go UP."
	     << "\n\nPress key 'A' to turn LEFT."
	     << "\n\nPress key 'S' to go DOWN."
	     << "\n\nPress key 'D' to turn RIGHT."
	     << "\n\nPress key 'X' to EXIT the game anytime"
             << "\n\n again....."
	     << "\n\nyou shouldn't touch the borders ,you shouldn't try to reverse your movement and try not to eat your tail otherwise you will LOSE."

	     << "\n\n\nNow press the 'm' key to go MENU.\n"<<endl;
	string input;
	cin >> input;
	if(input=="m")
		startingscreen();
}


void FruitSpawn()   //creating randomly positioned food
{
	fruitX = rand() % width; //we took the reminder value of the position of fruit's x coordinate.and by this way we constrain the food to be generated inside the playground
	fruitY = rand() % height; //bujhecho?na bujhle abar aager er definition poro
}


void Setup()   //manufacturing
{
	gameover = false; // untill the snake touches the wall then "gameover" will be false and game will continue
	shutDown = false;  // untill the snake touches the wall then "shutdown" will be false and game will continue
	direc = STOP;  //snakes head initial movement is equal to zero
	x = width / 2; //initial x co ordinate of the snake
	y = height / 2; //initial y co ordinate
	FruitSpawn(); //food creator function
	score = 0; //initial score will be zero
	num_of_tail = 0; //number of foods the snake eats initially
}



void Draw()
{
	system("cls"); //at first we'll clear the playground

	for (int i = 0; i < width + 2; i++) {  //at first we make the upper wall of the playground increasing it's value by 2
		cout << "=";}
	cout << endl;

	for (int i = 0; i < height; i++)  //the entire game will be continued by line after line in the playground.bujhecho botsho??
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0)
				cout << "!"; //whenever height and width is equal to zero then the condition makes the left side wall

			if (i == y && j == x)
				cout << "M"; //whenever snakes head coordinate is equal to i,j value then it'll print M as snakes head

			else if (i == fruitY && j == fruitX)
				cout << "F"; //whenever i,j is equal to the co ordinate of fruitX,fruitY then the condition will print F as regarding food

			else {
				bool print = false;
				for (int k = 0; k < num_of_tail; k++) {
					if (tailX[k] == j && tailY[k] == i) {
						cout << "o";  //the function creates the snakes tail that will be generated by eating food.tail will be as longer as num_of_fruits value.
						print = true;  //whenever the printing function for tail is being completed then print value will be true
					}
				}
				if(!print)
					cout << " ";
			}

			if (j == width - 1)
				cout << "!"; //it will make the right side wall of our playground
		}
		cout << endl;
	}
	for (int i = 0; i < width + 2; i++) {
		cout << "="; //it will make the bottom side wall of the playground
	}
	cout << endl;
	cout << "Score: " << score << endl;
}



void Input()  //user input section
{
	if (_kbhit()) {
		switch (_getch())   //a for Left move,...... d for Right move. and x for instant give up
		{
		case 'a':
			direc = LEFT;
			break;
		case 'w':
			direc = UP;
			break;
		case 's':
			direc = DOWN;
			break;
		case 'd':
			direc = RIGHT;
			break;
		case 'x':
			gameover = true;
			break;
		}
	}
}



void Logic()  //here an 1D array will generate the tail.indicating  tailX,tailY
{
	int X1 = tailX[0];  //initial x coordinate of the snakes's tail
	int Y1 = tailY[0];  //initial y coordinate of the snakes's tail
	int X2, Y2;
	tailX[0] = x;  //initial position of the snake is equal to tailX[0] and tailY[0]'s value
	tailY[0] = y;

	//most difficult part of the game ,how to move forward our snake when it eats food?it is not possible for me to teach you without any conversation or video...
//how the snake will move forward ?I'll try to discuss it briefly.for further detail you can make a contact with me.cz hathe kolome graph draw kore bujhate hobe.
	for (int i = 1; i < num_of_tail; i++) {
		X2 = tailX[i];
		Y2 = tailY[i];
		tailX[i] = X1;
		tailY[i] = Y1;
		X1 = X2;
		Y1 = Y2;

	}

	switch (direc)  //in which direction the snake will move
	{
	case LEFT: //if you press A that means you want to move the dude at LEFT.then x coordinate should decrease.bujhla?na bujhle bolio.
		x--;
		break;
	case RIGHT: //if you press D that means you want to move the dude at RIGHT.then x coordinate should increase
		x++;
		break;
	case UP: //if you press W...........(same logic)
		y--;
		break;
	case DOWN:  //if you press S...........(same logic)
		y++;
		break;
	}

//game over condition if the snake touches the rectangular wall
	if (x > width || x < 0 || y > height || y < 0) {  //if x>width && y>height it means the co ordinate of the snake crosses entire wall
		gameover = true;  //whenever it touches the wall gameover will be TRUE
		startingscreen(); //if gameover occurs then startscreen will appear again.in other sense game will start again
	}

	for (int i = 0; i < num_of_tail; i++) {  //if the snake touches it's tail it'll cause gameover
		if (tailX[i] == x && tailY[i] == y)
			gameover = true;
	}

//working logic......snake head touches the food and it increases snakes length and finally we creat another randomly generated food
	if (x == fruitX && y == fruitY) {  //if food coordinate and snake's coordinate will be equal then score will be increase and snake's tail or length will increase
		score++;
		num_of_tail++;
		FruitSpawn();  //another food will generate
	}
}



int main()
{
	do {
		startingscreen();
		string input;
		cin >> input;
		if (input == "s")
		{
			Setup(); //initializing occurs through pressing S
			while (!gameover)  //until the snake touches the wall
			{
				Draw();   //screen or playground designing
				Input();  //user input section(a/d/w/s/x)
				Logic();
				Sleep(300);  //delay function for our total screen pop up.in another sense it'll controll snake speed
			}
		}

		else if (input == "i")
			Instructions();
		else if (input == "q")
			shutDown = true;

	} while (shutDown == false);



    return 0;
}
